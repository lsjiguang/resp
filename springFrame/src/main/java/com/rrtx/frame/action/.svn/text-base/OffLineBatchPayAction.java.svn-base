package com.zte.pay.action;

import java.util.List;

import javax.annotation.Resource;

import org.springframework.stereotype.Controller;

import com.zte.pay.domain.OffLineBatchPayOrder;
import com.zte.pay.domain.OffLineBatchPayRequest;
import com.zte.pay.domain.OffLineBatchPayResponse;
import com.zte.pay.domain.OffLineBatchPayResult;
import com.zte.pay.domain.Request;
import com.zte.pay.domain.Response;
import com.zte.pay.exception.ZTEPayException;
import com.zte.pay.service.OffLineBatchPayService;
import com.zte.pay.util.AmountUtil;
 

/**
 * @ClassName: OffLineBatchPayAction 
 * @Description: 圈存交易，对应交易码为 1003
 * @author qijia
 * @date 2013-5-13 下午5:23:04
 * @version	1.0
 */
@Controller
public class OffLineBatchPayAction extends AbstractAction<OffLineBatchPayRequest, OffLineBatchPayResponse> {

	@Resource
	OffLineBatchPayService offLineBatchPayService;
	
	@Override
	public Response execute(Request request) {
		OffLineBatchPayResponse response=new OffLineBatchPayResponse();
		//将订单中的金额由元转为分
		List<OffLineBatchPayOrder> orders=((OffLineBatchPayRequest)request).getOrderList();
		
		for(OffLineBatchPayOrder order:orders){
			try {
				order.setAmount(AmountUtil.changeF2Y(order.getAmount()));
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		
		//处理订单		
		try {
			response = offLineBatchPayService.OffLineBatchPay((OffLineBatchPayRequest)request);
			response.getResponseHeader().success="true";
		} catch (ZTEPayException e) {
			TellException2Client(e, response);
		}
		
		//将订单中的金额由元转为分
		List<OffLineBatchPayResult> results=((OffLineBatchPayResponse)response).getOrderList();
				
		for(OffLineBatchPayResult order:results){
			try {
				order.setAmount(AmountUtil.changeY2F(order.getAmount()));
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
				
		return response;
	}

}
